openapi: 3.0.3
info:
  description: This API can be used to interact with the dScribe Graph. It exposes CRUD operations for all the major objects like METRICs, Attributes, Datasets and Dataset Elements.
  version: 1.0.0
  title: dScribe Data Catalog API
  termsOfService: https://dscribedata.com/terms/
  contact:
    email: support@dscribedata.com
servers:
  - url: https://your_tenant.dscribedata.com/api
    description: Production API server of dScribe
paths:
  /metric/list:
    summary: Represents a Metric within dScribe
    post:
      tags:
        - Metric
      requestBody:
        $ref: '#/components/requestBodies/ListBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  results:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - METRICID
                          properties:
                            METRICID:
                              type: string
                        - $ref: '#/components/schemas/REPORTNoConnectDisconnect'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Reports.
        url: https://documentation.dscribedata.com/reports
  /metric/create:
    summary: Represents a Metric within dScribe
    post:
      tags:
        - Metric
      requestBody:
        $ref: '#/components/requestBodies/CreateReportBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /metric/update:
    summary: Represents a Metric within dScribe
    post:
      tags:
        - Metric
      requestBody:
        $ref: '#/components/requestBodies/UpdateMetricBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Report.
        url: https://documentation.dscribedata.com/reports
  /metric/delete:
    summary: Represents a Metric within dScribe
    post:
      tags:
        - Metric
      requestBody:
        $ref: '#/components/requestBodies/DeleteBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Report.
        url: https://documentation.dscribedata.com/reports
  /report/list:
    summary: Represents a Report within dScribe
    post:
      tags:
        - Report
      requestBody:
        $ref: '#/components/requestBodies/ListBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  results:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - REPORTID
                          properties:
                            REPORTID:
                              type: string
                        - $ref: '#/components/schemas/REPORTNoConnectDisconnect'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Reports.
        url: https://documentation.dscribedata.com/reports
  /report/create:
    summary: Represents a Report within dScribe
    post:
      tags:
        - Report
      requestBody:
        $ref: '#/components/requestBodies/CreateReportBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /report/update:
    summary: Represents a Report within dScribe
    post:
      tags:
        - Report
      requestBody:
        $ref: '#/components/requestBodies/UpdateReportBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Report.
        url: https://documentation.dscribedata.com/reports
  /report/delete:
    summary: Represents a Report within dScribe
    post:
      tags:
        - Report
      requestBody:
        $ref: '#/components/requestBodies/DeleteBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Report.
        url: https://documentation.dscribedata.com/reports
  /dataset/list:
    summary: Represents a Data Asset within dScribe
    post:
      tags:
        - Dataset
      requestBody:
        $ref: '#/components/requestBodies/ListBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  results:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - METRICID
                          properties:
                            METRICID:
                              type: string
                        - $ref: '#/components/schemas/DATASETNoConnectDisconnect'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Data Asset.
        url: https://documentation.dscribedata.com/data-assets
  /dataset/create:
    summary: Represents a Data Asset within dScribe
    post:
      tags:
        - Dataset
      requestBody:
        $ref: '#/components/requestBodies/CreateDatasetBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /dataset/update:
    summary: Represents a Data Asset within dScribe
    post:
      tags:
        - Dataset
      requestBody:
        $ref: '#/components/requestBodies/UpdateDatasetBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Data Asset.
        url: https://documentation.dscribedata.com/data-assets
  /dataset/delete:
    summary: Represents a Data Asset within dScribe
    post:
      tags:
        - Dataset
      requestBody:
        $ref: '#/components/requestBodies/DeleteBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Data Asset.
        url: https://documentation.dscribedata.com/data-assets
  /dse/list:
    summary: Represents a Dse within dScribe
    post:
      tags:
        - Dse
      requestBody:
        $ref: '#/components/requestBodies/ListBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  results:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - DSEID
                          properties:
                            METRICID:
                              type: string
                        - $ref: '#/components/schemas/DSE'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Dse.
        url: https://documentation.dscribedata.com/dse
  /dse/create:
    summary: Represents a Dse within dScribe
    post:
      tags:
        - Dse
      requestBody:
        $ref: '#/components/requestBodies/CreateDseBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /dse/update:
    summary: Represents a Dse within dScribe
    post:
      tags:
        - Dse
      requestBody:
        $ref: '#/components/requestBodies/UpdateDseBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Dse.
        url: https://documentation.dscribedata.com/dse
  /dse/delete:
    summary: Represents a Dse within dScribe
    post:
      tags:
        - Dse
      requestBody:
        $ref: '#/components/requestBodies/DeleteBody'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPostPutDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      externalDocs:
        description: Learn more about a Dse.
        url: https://documentation.dscribedata.com/dse
security:
  - bearerAuth: []
components:
  requestBodies:
    UpdateMetricBody:
      description: Update Metric body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - type: object
                  required:
                    - METRICID
                  properties:
                    METRICID:
                      type: string
                    NAME:
                      type: string
                    PROPERTIES:
                      type: object
                      properties:
                        '{readable_id}':
                          type: array
                          description: The readable_id as defined in the portal with an array of values
                          items:
                            type: string
    UpdateReportBody:
      description: Update Report body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - type: object
                  required:
                    - REPORTID
                  properties:
                    REPORTID:
                      type: string
                    NAME:
                      type: string
                    PROPERTIES:
                      type: object
                      properties:
                        '{readable_id}':
                          type: array
                          description: The readable_id as defined in the portal with an array of values
                          items:
                            type: string
                    SOURCE_PROPERTIES:
                      type: object
                      properties:
                        CLASSIFICATION:
                          type: string
                        TYPE:
                          type: string
                        UPDATEDON:
                          type: string
                        UPDATEDBY:
                          type: string
                        CREATEDON:
                          type: string
                        CREATEDBY:
                          type: string
    UpdateDatasetBody:
      description: Update Dataset body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - type: object
                  required:
                    - DATASETID
                  properties:
                    DATASETID:
                      type: string
                    NAME:
                      type: string
                    PROPERTIES:
                      type: object
                      properties:
                        '{readable_id}':
                          type: array
                          description: The readable_id as defined in the portal with an array of values
                          items:
                            type: string
                    SOURCE_PROPERTIES:
                      type: object
                      properties:
                        CLASSIFICATION:
                          type: string
                        TYPE:
                          type: string
                        UPDATEDON:
                          type: string
                        UPDATEDBY:
                          type: string
                        CREATEDON:
                          type: string
                        CREATEDBY:
                          type: string
    UpdateDseBody:
      description: Update Dse body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - type: object
                  required:
                    - DSEID
                  properties:
                    DSEID:
                      type: string
                    NAME:
                      type: string
                    SOURCE_PROPERTIES:
                      type: object
                      properties:
                        CLASSIFICATION:
                          type: string
                        TYPE:
                          type: string
                        UPDATEDON:
                          type: string
                        UPDATEDBY:
                          type: string
                        CREATEDON:
                          type: string
                        CREATEDBY:
                          type: string
    CreateReportBody:
      description: Create Report body. Creating properties in this way is not supported.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/REPORTNoProperty'
    CreateDatasetBody:
      description: Create Dataset body. Creating properties in this way is not supported.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DATASETNoProperty'
    CreateDseBody:
      description: Create Dse body. Creating properties in this way is not supported.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DSE'
    ListBody:
      description: Body to filter results
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Options'
              - type: object
                properties:
                  where:
                    oneOf:
                      - $ref: '#/components/schemas/Where'
                      - $ref: '#/components/schemas/OR'
                      - $ref: '#/components/schemas/AND'
    DeleteBody:
      description: Body to delete objects from the graph.
      required: true
      content:
        application/json:
          schema:
            type: array
            description: Array of IDs that have to be removed. When removing a METRIC, the values should correspond with the METRICID field etc..
            items:
              type: string
  responses:
    SuccessPostPutDelete:
      description: A successful operation for POST, PUT and DELETE
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessPostPutDelete'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    ConnectReport:
      type: object
      description: Using the connect key will look for REPORTs and create/remove a relation between the current object and the matching reports
      properties:
        where:
          type: object
          properties:
            node:
              $ref: '#/components/schemas/WhereNoProperties'
    ConnectDataset:
      type: object
      description: Using the connect key will look for DATASETs and create/remove a relation between the current object and the matching reports
      properties:
        where:
          type: object
          properties:
            node:
              $ref: '#/components/schemas/WhereNoProperties'
    OR:
      type: array
      description: Logical OR operator. The API will return the union of all the matches.
      items:
        $ref: '#/components/schemas/Where'
    AND:
      type: array
      description: the logical AND operator. The API will only return documents that satisfy every statement.
      items:
        $ref: '#/components/schemas/Where'
    Options:
      type: object
      properties:
        limit:
          default: 20
          type: number
          description: The number of items that are being returned. Defaults to 20
        offset:
          default: 0
          type: number
          description: used in combination with limit to implement pagination.
    Metadata:
      type: object
      properties:
        total:
          type: number
          description: The total number of objects in the graph. Use in conjunction with limit and offset to implement pagination.
    WhereNoProperties:
      type: object
      properties:
        '{TAG}ID':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_NOT':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_IN':
          type: array
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
          items:
            type: string
        '{TAG}ID_NOT_IN':
          type: array
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
          items:
            type: string
        '{TAG}ID_CONTAINS':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_NOT_CONTAINS':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{FIELD}':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_NOT':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_IN':
          type: array
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
          items:
            type: string
        '{FIELD}_NOT_IN':
          type: array
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
          items:
            type: string
        '{FIELD}_CONTAINS':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_NOT_CONTAINS':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
    Where:
      type: object
      properties:
        '{TAG}ID':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_NOT':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_IN':
          type: array
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
          items:
            type: string
        '{TAG}ID_NOT_IN':
          type: array
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
          items:
            type: string
        '{TAG}ID_CONTAINS':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{TAG}ID_NOT_CONTAINS':
          type: string
          description: Replace {TAG} with one of the major objects described in this document -> METRICID, REPORTID, DATASETID, DSEID
        '{FIELD}':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_NOT':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_IN':
          type: array
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
          items:
            type: string
        '{FIELD}_NOT_IN':
          type: array
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
          items:
            type: string
        '{FIELD}_CONTAINS':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
        '{FIELD}_NOT_CONTAINS':
          type: string
          description: Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...
    SuccessPostPutDelete:
      type: object
      properties:
        total:
          type: number
        failed:
          type: number
        retry:
          type: number
        successful:
          type: number
        time:
          type: number
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    DATASETNoProperty:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
        DSES:
          type: array
          items:
            $ref: '#/components/schemas/DSE'
    DATASETNoConnectDisconnect:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
        PROPERTIES:
          type: object
          properties:
            '{readable_id}':
              type: array
              description: The readable_id as defined in the portal with an array of values
              items:
                type: string
      required:
        - NAME
    DATASET:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
        PROPERTIES:
          type: object
          properties:
            '{readable_id}':
              type: array
              description: The readable_id as defined in the portal with an array of values
              items:
                type: string
        REPORT:
          type: object
          properties:
            disconnect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectReport'
            connect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectReport'
        DATASET:
          type: object
          properties:
            disconnect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectDataset'
            connect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectDataset'
      required:
        - NAME
    REPORTNoProperty:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
    REPORTNoConnectDisconnect:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
        PROPERTIES:
          type: object
          properties:
            '{readable_id}':
              type: array
              description: The readable_id as defined in the portal with an array of values
              items:
                type: string
      required:
        - NAME
    REPORT:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
        PROPERTIES:
          type: object
          properties:
            '{readable_id}':
              type: array
              description: The readable_id as defined in the portal with an array of values
              items:
                type: string
        REPORT:
          type: object
          properties:
            disconnect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectReport'
            connect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectReport'
        DATASET:
          type: object
          properties:
            disconnect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectDataset'
            connect:
              type: array
              items:
                $ref: '#/components/schemas/ConnectDataset'
      required:
        - NAME
    DSE:
      type: object
      properties:
        NAME:
          type: string
        DESC:
          type: string
        DESCFULLTEXT:
          type: string
        PARENT:
          type: string
        IS_LEAF:
          type: string
        DATASETID:
          type: string
        SOURCE_PROPERTIES:
          type: object
          properties:
            CLASSIFICATION:
              type: string
            TYPE:
              type: string
            UPDATEDON:
              type: string
            UPDATEDBY:
              type: string
            CREATEDON:
              type: string
            CREATEDBY:
              type: string
      required:
        - NAME
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
externalDocs:
  description: Find out more about dScribe
  url: https://dscribedata.com
